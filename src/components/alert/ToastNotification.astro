---

---

<section class="component-section">
  <h3>Toast Notifications</h3>
  <div x-data="toastNotification()">
    <div class="demo-controls">
      <button
        class="btn"
        @click="addToast('success', 'Succès', 'Opération réussie !')"
        >Toast Succès</button
      >
      <button
        class="btn"
        @click="addToast('error', 'Erreur', 'Une erreur est survenue')"
        >Toast Erreur</button
      >
      <button
        class="btn"
        @click="addToast('warning', 'Attention', 'Attention requise')"
        >Toast Warning</button
      >
      <button
        class="btn"
        @click="addToast('info', 'Information', 'Nouvelle information')"
        >Toast Info</button
      >
    </div>

    <div class="toast-container">
      <template x-for="toast in toasts" :key="toast.id">
        <div
          class="toast"
          :class="toast.type"
          x-transition:enter="transition ease-out duration-300"
          x-transition:enter-start="opacity-0 transform translate-x-full"
          x-transition:enter-end="opacity-100 transform translate-x-0"
          x-transition:leave="transition ease-in duration-300"
          x-transition:leave-start="opacity-100 transform translate-x-0"
          x-transition:leave-end="opacity-0 transform translate-x-full"
          role="alert"
          aria-live="polite"
        >
          <div class="toast-content">
            <div class="toast-title" x-text="toast.title"></div>
            <div x-text="toast.message"></div>
          </div>
          <button
            class="toast-close"
            @click="removeToast(toast.id)"
            aria-label="Fermer la notification"
          >
            ×
          </button>
        </div>
      </template>
    </div>
  </div>
</section>

<script>
  import { defineComponent } from "@utils/utils.js";

  /**
   * Toast notification component handler
   *
   * @component
   * @description Manages a stack of toast notifications with unique IDs and optional auto-dismiss
   *
   * @property {Array} toasts - Array storing active toast notifications
   * @property {Number} nextId - Counter for generating unique toast IDs
   *
   * @method addToast
   * @param {String} type - The type of toast notification (e.g., 'success', 'error', etc.)
   * @param {String} title - The title text of the toast
   * @param {String} message - The main message content of the toast
   * @param {Number} [duration=5000] - Duration in milliseconds before auto-dismissal (default: 5000)
   * @description Adds a new toast to the stack. Error toasts don't auto-dismiss
   *
   * @method removeToast
   * @param {Number} id - The unique identifier of the toast to remove
   * @description Removes a specific toast from the stack based on its ID
   *
   * @example
   * // Adding a success toast
   * addToast('success', 'Success!', 'Operation completed', 3000);
   *
   * // Adding an error toast (won't auto-dismiss)
   * addToast('error', 'Error', 'Something went wrong');
   *
   * // Manually removing a toast
   * removeToast(1);
   */
  defineComponent("toastNotification", () => {
    return {
      toasts: [],
      nextId: 1,

      addToast(type, title, message, duration = 5000) {
        const toast = {
          id: this.nextId++,
          type: type,
          title: title,
          message: message,
        };

        this.toasts.push(toast);

        if (type !== "error") {
          setTimeout(() => {
            this.removeToast(toast.id);
          }, duration);
        }
      },

      removeToast(id) {
        this.toasts = this.toasts.filter((toast) => toast.id !== id);
      },
    };
  });
</script>

<style>
  :root {
    --toast-container-top: 1.25rem;
    --toas-container-right: 1.25rem;
    --toast-container-z-index: 1000;
    --toast-container-gap: 0.625rem;

    --toast-gap: 0.625rem;
    --toast-min-width: 18.75rem;
    --toast-padding: 1rem;
    --toast-border: #ddd;
    --toast-radius: 0.25rem;
    --toast-bg: #fff;
    --toast-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);

    --toast-border-size: 0.25rem;

    --toast-success-border-color: #28a745;
    --toast-error-border-color: #dc3545;
    --toast-warning-border-color: #ffc107;
    --toast-info-border-color: #17a2b8;

    --toast-title-weight: bold;
    --toast-title-margin-bottom: 0.25rem;

    --toast-close-padding: 0.25rem;
    --toast-close-border: none;
    --toast-close-border-radius: 0.25rem;
    --toast-close-bg: transparent;

    --toast-close-hover-bg: rgba(0, 0, 0, 0.1);
    --toast-close-outline: 2px solid currentColor;
  }

  .toast-container {
    position: fixed;
    top: var(--toast-container-top);
    right: var(--toas-container-right);
    z-index: var(--toast-container-z-index);
    display: flex;
    flex-direction: column;
    gap: var(--toast-container-gap);
  }

  .toast {
    display: flex;
    align-items: flex-start;
    gap: var(--toast-gap);
    background: var(--toast-bg);
    border: 1px solid var(--toast-border);
    border-radius: var(--toast-radius);
    padding: var(--toast-padding);
    min-width: var(--toast-min-width);
    box-shadow: var(--toast-shadow);

    &.success {
      border-left: var(--toast-border-size) solid var(--toast-success-border-color);
    }

    &.error {
      border-left: var(--toast-border-size) solid var(--toast-error-border-color);
    }

    &.warning {
      border-left: var(--toast-border-size) solid var(--toast-warning-border-color);
    }

    &.info {
      border-left: var(--toast-border-size) solid var(--toast-info-border-color);
    }
  }

  .toast-content {
    flex: 1;
  }

  .toast-title {
    font-weight: var(--toast-title-weight);
    margin-bottom: var(--toast-title-margin-bottom);
  }

  .toast-close {
    padding: var(--toast-close-padding);
    border: var(--toast-close-border);
    border-radius: var(--toast-close-border-radius);
    background: var(--toast-close-bg);
    cursor: pointer;

    &:is(:hover, :focus) {
      background: var(--toast-close-hover-bg);
      outline: var(--toast-close-outline);
    }
  }
</style>
