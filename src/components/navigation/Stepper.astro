---

---

<!-- Stepper Component -->
<div class="component-section">
  <h2>Stepper</h2>
  <div x-data="stepper()">
    <div
      class="stepper"
      role="progressbar"
      :aria-valuenow="currentStep + 1"
      aria-valuemin="1"
      :aria-valuemax="steps.length"
    >
      <template x-for="(step, index) in steps" :key="index">
        <div
          class="step"
          :class="{
                'active': index === currentStep,
                'completed': index < currentStep
            }"
        >
          <div class="step-circle">
            <span x-show="index < currentStep">✓</span>
            <span x-show="index >= currentStep" x-text="index + 1"></span>
          </div>
          <div x-text="step.label"></div>
          <div class="step-line"></div>
        </div>
      </template>
    </div>

    <div style="margin-top: 2rem; text-align: center;">
      <button class="btn" @click="prevStep()" :disabled="currentStep === 0"
        >Précédent</button
      >
      <button
        class="btn"
        @click="nextStep()"
        :disabled="currentStep === steps.length - 1">Suivant</button
      >
    </div>

    <div
      style="margin-top: 1rem; padding: 1rem; background: #f8f9fa; border-radius: 4px;"
    >
      <h3 x-text="steps[currentStep].label"></h3>
      <p x-text="steps[currentStep].content"></p>
    </div>
  </div>
</div>

<script>
  import { defineComponent } from "@utils/utils.js";

  defineComponent("stepper", () => {
    return {
      currentStep: 0,
      steps: [
        {
          label: "Étape 1",
          content:
            "Contenu de la première étape. Remplissez les informations de base.",
        },
        {
          label: "Étape 2",
          content:
            "Contenu de la deuxième étape. Configurez les options avancées.",
        },
        {
          label: "Étape 3",
          content:
            "Contenu de la troisième étape. Vérifiez et validez vos choix.",
        },
        {
          label: "Étape 4",
          content: "Étape finale. Confirmez et finalisez le processus.",
        },
      ],

      nextStep() {
        if (this.currentStep < this.steps.length - 1) {
          this.currentStep++;
        }
      },

      prevStep() {
        if (this.currentStep > 0) {
          this.currentStep--;
        }
      },

      goToStep(index) {
        if (index >= 0 && index < this.steps.length) {
          this.currentStep = index;
        }
      },
    };
  });
</script>

<style>
  /* Stepper Styles */
  .stepper {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 2rem 0;
  }

  .step {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    position: relative;
  }

  .step-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #f0f0f0;
    border: 2px solid #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .step.active .step-circle {
    background: #007acc;
    color: white;
    border-color: #007acc;
  }

  .step.completed .step-circle {
    background: #28a745;
    color: white;
    border-color: #28a745;
  }

  .step-line {
    position: absolute;
    top: 20px;
    left: 50%;
    width: 100%;
    height: 2px;
    background: #ddd;
    z-index: -1;
  }

  .step:last-child .step-line {
    display: none;
  }

  .step.completed .step-line {
    background: #28a745;
  }
</style>
