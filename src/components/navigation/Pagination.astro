---

---

<!-- Composant Pagination -->
<section class="component-section">
  <h2>Composant Pagination</h2>

  <div
    x-data="{
            currentPage: 1,
                totalPages: 10,
                totalItems: 95,
                itemsPerPage: 10,
                maxVisiblePages: 5,

                init() {
                    this.$el.addEventListener('keydown', (e) => {
                        if (e.target.classList.contains('pagination-button')) {
                            this.handleKeyNavigation(e);
                        }
                    });
                },

                get visiblePages() {
                    const pages = [];
                    const half = Math.floor(this.maxVisiblePages / 2);
                    let start = Math.max(1, this.currentPage - half);
                    let end = Math.min(this.totalPages, start + this.maxVisiblePages - 1);

                    if (end - start + 1 < this.maxVisiblePages) {
                        start = Math.max(1, end - this.maxVisiblePages + 1);
                    }

                    for (let i = start; i <= end; i++) {
                        pages.push(i);
                    }

                    return pages;
                },

                goToPage(page) {
                    if (page >= 1 && page <= this.totalPages && page !== this.currentPage) {
                        this.currentPage = page;
                        this.announcePageChange();
                    }
                },

                announcePageChange() {
                    const announcement = document.createElement('div');
                    announcement.setAttribute('aria-live', 'assertive');
                    announcement.setAttribute('aria-atomic', 'true');
                    announcement.className = 'sr-only';
                    announcement.textContent = `Page ${this.currentPage} chargée`;
                    document.body.appendChild(announcement);

                    setTimeout(() => {
                        document.body.removeChild(announcement);
                    }, 1000);
                },

                handleKeyNavigation(e) {
                    const buttons = [...this.$el.querySelectorAll('.pagination-button:not(:disabled)')];
                    const currentIndex = buttons.indexOf(e.target);

                    switch(e.key) {
                        case 'ArrowLeft':
                            e.preventDefault();
                            if (currentIndex > 0) {
                                buttons[currentIndex - 1].focus();
                            }
                            break;
                        case 'ArrowRight':
                            e.preventDefault();
                            if (currentIndex < buttons.length - 1) {
                                buttons[currentIndex + 1].focus();
                            }
                            break;
                        case 'Home':
                            e.preventDefault();
                            buttons[0].focus();
                            break;
                        case 'End':
                            e.preventDefault();
                            buttons[buttons.length - 1].focus();
                            break;
                    }
                }
            }"
    x-init="init()"
  >
    <!-- Navigation de pagination -->
    <nav aria-label="Navigation de pagination" role="navigation">
      <div class="pagination-info" aria-live="polite" aria-atomic="true">
        Page <span x-text="currentPage"></span> sur <span x-text="totalPages"
        ></span>
        (Total: <span x-text="totalItems"></span> éléments)
      </div>

      <ul class="pagination" role="list">
        <!-- Bouton Précédent -->
        <li>
          <button
            @click="goToPage(currentPage - 1)"
            :disabled="currentPage === 1"
            :aria-label="`Aller à la page précédente (page ${currentPage - 1})`"
            class="pagination-button"
            type="button"
          >
            « Précédent
          </button>
        </li>

        <!-- Pages -->
        <template x-for="page in visiblePages" :key="page">
          <li>
            <button
              @click="goToPage(page)"
              :class="{'pagination-button': true, 'current': page === currentPage}"
              :aria-label="page === currentPage ? `Page courante, page ${page}` : `Aller à la page ${page}`"
              :aria-current="page === currentPage ? 'page' : null"
              type="button"
              x-text="page"
            >
            </button>
          </li>
        </template>

        <!-- Bouton Suivant -->
        <li>
          <button
            @click="goToPage(currentPage + 1)"
            :disabled="currentPage === totalPages"
            :aria-label="`Aller à la page suivante (page ${currentPage + 1})`"
            class="pagination-button"
            type="button"
          >
            Suivant »
          </button>
        </li>
      </ul>
    </nav>

    <!-- Contenu simulé -->
    <div class="pagination-info">
      <strong>Contenu de la page <span x-text="currentPage"></span></strong>
      <p>Voici le contenu simulé pour la page courante.</p>
    </div>
  </div>
</section>

<style>
  /* Styles pour la Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin: 20px 0;
    list-style: none;
  }

  .pagination-button {
    padding: 8px 12px;
    border: 1px solid #ddd;
    background: white;
    color: #333;
    text-decoration: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .pagination-button:hover:not(:disabled) {
    background: #f0f0f0;
    border-color: #bbb;
  }

  .pagination-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination-button.current {
    background: #007acc;
    color: white;
    border-color: #007acc;
  }

  .pagination-info {
    margin: 10px 0;
    text-align: center;
    color: #666;
  }
</style>
