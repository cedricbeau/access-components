---

---

<section class="component-section">
  <h3>Form Validation - Messages d'erreur dynamiques et accessibles</h3>

  <div class="demo-info">
    <strong>Fonctionnalités d'accessibilité :</strong>
    <ul>
      <li>
        Messages d'erreur annoncés aux lecteurs d'écran avec <code
          >aria-live</code
        >
      </li>
      <li>
        Association des messages avec les champs via <code
          >aria-describedby</code
        >
      </li>
      <li>État d'erreur indiqué avec <code>aria-invalid</code></li>
      <li>Résumé des erreurs pour navigation rapide</li>
      <li>Support complet du clavier</li>
    </ul>
  </div>

  <div x-data="formValidation()">
    <!-- Form Error Summary -->
    <div
      x-show="hasErrors && showSummary"
      x-ref="errorSummary"
      class="form-summary error"
      role="alert"
      tabindex="-1"
      aria-labelledby="error-summary-title"
      x-transition
    >
      <h3 id="error-summary-title">Erreurs dans le formulaire :</h3>
      <ul>
        <template x-for="error in errorList" :key="error.field">
          <li>
            <a
              :href="'#' + error.field"
              @click.prevent="focusField(error.field)"
              x-text="error.label + ': ' + error.message"></a>
          </li>
        </template>
      </ul>
    </div>

    <!-- Success Message -->
    <div
      x-show="isSubmitted && !hasErrors"
      class="form-summary success"
      role="alert"
      x-transition
    >
      <span aria-hidden="true">✓</span> Formulaire soumis avec succès !
    </div>

    <form @submit.prevent="submitForm" novalidate>
      <!-- Email Field -->
      <div class="form-group">
        <label for="email" class="required">Adresse e-mail</label>
        <input
          type="email"
          id="email"
          x-model="fields.email.value"
          @blur="validateField('email')"
          @input="clearFieldError('email')"
          :class="getFieldClasses('email')"
          :aria-invalid="fields.email.error ? 'true' : 'false'"
          :aria-describedby="getAriaDescribedBy('email')"
          autocomplete="email"
        />

        <span id="email-help" class="help-text">
          Nous utiliserons cette adresse pour vous contacter
        </span>

        <span
          id="email-error"
          class="error-message"
          x-show="fields.email.error"
          aria-live="polite"
          x-text="fields.email.error"
          x-transition></span>

        <span
          id="email-success"
          class="success-message"
          x-show="fields.email.valid && !fields.email.error"
          aria-live="polite"
          x-transition
        >
          ✓ Adresse e-mail valide
        </span>
      </div>

      <!-- Password Field -->
      <div class="form-group">
        <label for="password" class="required">Mot de passe</label>
        <input
          type="password"
          id="password"
          x-model="fields.password.value"
          @blur="validateField('password')"
          @input="clearFieldError('password')"
          :class="getFieldClasses('password')"
          :aria-invalid="fields.password.error ? 'true' : 'false'"
          :aria-describedby="getAriaDescribedBy('password')"
          autocomplete="new-password"
        />

        <span id="password-help" class="help-text">
          Minimum 8 caractères avec au moins une majuscule et un chiffre
        </span>

        <span
          id="password-error"
          class="error-message"
          x-show="fields.password.error"
          aria-live="polite"
          x-text="fields.password.error"
          x-transition></span>

        <span
          id="password-success"
          class="success-message"
          x-show="fields.password.valid && !fields.password.error"
          aria-live="polite"
          x-transition
        >
          ✓ Mot de passe sécurisé
        </span>
      </div>

      <!-- Confirm Password Field -->
      <div class="form-group">
        <label for="confirmPassword" class="required"
          >Confirmer le mot de passe</label
        >
        <input
          type="password"
          id="confirmPassword"
          x-model="fields.confirmPassword.value"
          @blur="validateField('confirmPassword')"
          @input="clearFieldError('confirmPassword')"
          :class="getFieldClasses('confirmPassword')"
          :aria-invalid="fields.confirmPassword.error ? 'true' : 'false'"
          :aria-describedby="getAriaDescribedBy('confirmPassword')"
          autocomplete="new-password"
        />

        <span
          id="confirmPassword-error"
          class="error-message"
          x-show="fields.confirmPassword.error"
          aria-live="polite"
          x-text="fields.confirmPassword.error"
          x-transition></span>

        <span
          id="confirmPassword-success"
          class="success-message"
          x-show="fields.confirmPassword.valid && !fields.confirmPassword.error"
          aria-live="polite"
          x-transition
        >
          ✓ Les mots de passe correspondent
        </span>
      </div>

      <!-- Age Field -->
      <div class="form-group">
        <label for="age" class="required">Âge</label>
        <input
          type="number"
          id="age"
          x-model="fields.age.value"
          @blur="validateField('age')"
          @input="clearFieldError('age')"
          :class="getFieldClasses('age')"
          :aria-invalid="fields.age.error ? 'true' : 'false'"
          :aria-describedby="getAriaDescribedBy('age')"
          min="13"
          max="120"
        />

        <span id="age-help" class="help-text">
          Vous devez avoir au moins 13 ans
        </span>

        <span
          id="age-error"
          class="error-message"
          x-show="fields.age.error"
          aria-live="polite"
          x-text="fields.age.error"
          x-transition></span>

        <span
          id="age-success"
          class="success-message"
          x-show="fields.age.valid && !fields.age.error"
          aria-live="polite"
          x-transition
        >
          ✓ Âge valide
        </span>
      </div>

      <button
        type="submit"
        class="btn"
        :disabled="isSubmitting"
        :aria-describeddby="hasErrors ? 'error-summary-title' : null"
      >
        <span x-show="!isSubmitting">Valider le formulaire</span>
        <span x-show="isSubmitting">Validation en cours...</span>
        <span class="sr-only" x-show="hasErrors">
          - Veuillez corriger les erreurs ci-dessus</span
        >
      </button>
    </form>
  </div>
</section>

<script>
  import { defineComponent } from "@utils/utils.js";

  defineComponent("formValidation", () => {
    return {
      fields: {
        email: { value: "", error: "", valid: false },
        password: { value: "", error: "", valid: false },
        confirmPassword: { value: "", error: "", valid: false },
        age: { value: "", error: "", valid: false },
      },
      isSubmitting: false,
      isSubmitted: false,
      showSummary: false,

      hasErrors() {
        return Object.values(this.fields).some((field) => field.error);
      },

      errorList() {
        const errors = [];
        const labels = {
          email: "E-mail",
          password: "Mot de passe",
          confirmPassword: "Confirmation du mot de passe",
          age: "Âge",
        };

        Object.entries(this.fields).forEach(([key, field]) => {
          if (field.error) {
            errors.push({
              field: key,
              label: labels[key],
              message: field.error,
            });
          }
        });

        return errors;
      },

      validateField(fieldName) {
        const field = this.fields[fieldName];
        const value = field.value.trim();

        field.error = "";
        field.valid = false;

        switch (fieldName) {
          case "email":
            if (!value) {
              field.error = "Une adresse e-mail est requise";
            } else if (!this.isValidEmail(value)) {
              field.error = "Veuillez saisir une adresse e-mail valide";
            } else {
              field.valid = true;
            }
            break;

          case "password":
            if (!value) {
              field.error = "Le mot de passe est requis";
            } else if (value.length < 8) {
              field.error =
                "Le mot de passe doit contenir au moins 8 caractères";
            } else if (!/(?=.*[A-Z])(?=.*\d)/.test(value)) {
              field.error =
                "Le mot de passe doit contenir au moins une majuscule et un chiffre";
            } else {
              field.valid = true;
            }

            if (this.fields.confirmPassword.value) {
              this.validateField("confirmPassword");
            }
            break;

          case "confirmPassword":
            if (!value) {
              field.error = "La confirmation du mot de passe est requise";
            } else if (value !== this.fields.password.value) {
              field.error = "Les mots de passe ne correspondent pas";
            } else {
              field.valid = true;
            }
            break;

          case "age":
            const age = parseInt(value);
            if (!value) {
              field.error = "La date de naissance est requise";
            } else if (isNaN(age)) {
              field.error = "Veuillez saisir un âge valide";
            } else if (age < 13) {
              field.error = "Vous devez avoir au moins 13 ans";
            } else if (age > 120) {
              field.error = "Veuillez saisir un âge réaliste";
            } else {
              field.valid = true;
            }
            break;
        }
      },

      validateAllFields() {
        Object.keys(this.fields).forEach((fieldName) => {
          this.validateField(fieldName);
        });
      },

      clearFieldError(fieldName) {
        if (this.fields[fieldName].error) {
          this.fields[fieldName].error = "";
        }
      },

      submitForm() {
        this.isSubmitting = true;
        this.isSubmitted = false;
        this.showSummary = false;

        this.validateAllFields();

        if (this.hasErrors) {
          this.showSummary = true;
          this.isSubmitting = false;

          this.$nextTick(() => {
            this.$refs.errorSummary?.focus();
          });

          return;
        }

        setTimeout(() => {
          this.isSubmitting = false;
          this.isSubmitted = true;

          setTimeout(() => {
            this.resetForm();
          }, 3000);
        }, 1000);
      },

      resetForm() {
        Object.keys(this.fields).forEach((key) => {
          this.fields[key] = { value: "", error: "", valid: false };
        });
        this.isSubmitted = false;
        this.showSummary = false;
      },

      isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      },

      getFieldClasses(fieldName) {
        const field = this.fields[fieldName];
        if (field.error) return "input-error";
        if (field.valid) return "input-success";
        return "";
      },

      getAriaDescribedBy(fieldName) {
        const helpers = [`${fieldName}-help`];
        const field = this.fields[fieldName];

        if (field.error) {
          helpers.push(`${fieldName}-error`);
        } else if (field.valid) {
          helpers.push(`${fieldName}-success`);
        }

        return helpers.join(" ");
      },

      focusField(fieldName) {
        const field = document.getElementById(fieldName);
        if (field) field.focus();
      },
    };
  });
</script>

<style>
  /* Form Styles */
  .form-group {
    margin-bottom: 1.5rem;
  }

  label {
    display: block;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #374151;
  }

  .required::after {
    content: " *";
    color: #dc2626;
  }

  input,
  textarea,
  select {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #d1d5db;
    border-radius: 4px;
    font-size: 1rem;
    transition:
      border-color 0.2s,
      box-shadow 0.2s;
  }

  input:focus,
  textarea:focus,
  select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .input-error {
    border-color: #dc2626 !important;
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1) !important;
  }

  .input-success {
    border-color: #10b981 !important;
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
  }

  .error-message {
    display: block;
    color: #dc2626;
    font-size: 0.875rem;
    margin-top: 0.5rem;
    font-weight: 500;
  }

  .success-message {
    display: block;
    color: #10b981;
    font-size: 0.875rem;
    margin-top: 0.5rem;
    font-weight: 500;
  }

  .help-text {
    display: block;
    color: #6b7280;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  .form-summary {
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 4px;
    font-weight: 600;
  }

  .form-summary.error {
    background: #fef2f2;
    border: 1px solid #fecaca;
    color: #dc2626;
  }

  .form-summary.success {
    background: #f0fdf4;
    border: 1px solid #bbf7d0;
    color: #166534;
  }

  .demo-info {
    background: #eff6ff;
    border: 1px solid #bfdbfe;
    color: #1e40af;
    padding: 1rem;
    border-radius: 4px;
    margin-bottom: 1.5rem;
  }
</style>
