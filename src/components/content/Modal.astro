---

---

<section class="component-section">
  <h3>Modal</h3>
  <div x-data="{ openModal: (id) => $dispatch('open-modal', { id }) }">
    <button class="btn" @click="openModal('example-modal')">
      Ouvrir la modal
    </button>
  </div>

  <div
    x-data="modal()"
    x-show="isOpen"
    x-on:open-modal.window="open($event.detail.id)"
    x-on:close-modal.window="close()"
    x-on:keydown.escape.window="close()"
    x-trap="isOpen"
    class="modal-overlay"
    x-transition.opacity.duration.300ms
    x-cloak
    role="dialog"
    aria-modal="true"
    aria-labelledby="modal-title"
    aria-describedby="modal-description"
  >
    <div class="modal-content" @click.stop>
      <div class="modal-header">
        <h3 id="modal-title">Titre de la modal</h3>
        <button class="close-btn" @click="close()" aria-label="Fermer la modal">
          ×
        </button>
      </div>
      <div id="modal-description">
        <p>
          Contenu de la modal. Cette modal est accessible aux lecteurs d'écran
          et supporte la navigation au clavier.
        </p>
        <p>Appuyez sur Échap pour fermer.</p>
      </div>
    </div>
  </div>
</section>

<script>
  import { defineComponent } from "@utils/utils.js";

/**
 * Modal component functionality
 *
 * @component
 * @description Defines a modal component with open/close functionality and body scroll management
 *
 * @property {boolean} isOpen - Controls the visibility state of the modal
 * @property {string|null} modalId - Stores the ID of the currently open modal
 *
 * @method open
 * @param {string} id - The ID of the modal to open
 * @description Opens the modal if the ID matches "example-modal" and prevents body scrolling
 *
 * @method close
 * @description Closes the modal and restores body scrolling
 *
 * @example
 * // Opening a modal
 * modal.open("example-modal");
 *
 * // Closing a modal
 * modal.close();
 */
  defineComponent("modal", () => {
    return {
      isOpen: false,
      modalId: null,

      open(id) {
        if (id === "example-modal") {
          this.isOpen = true;
          this.modalId = id;
          document.body.style.overflow = "hidden";
        }
      },

      close() {
        this.isOpen = false;
        this.modalId = null;
        document.body.style.overflow = "";
      },
    };
  });
</script>

<style>
:root {
    /* .modal-overlay */
    --modal-overlay-inset: 0;
    --modal-overlay-z-index: 1000;
    --modal-overlay-width: 100vw;
    --modal-overlay-height: 100dvh;
    --modal-overlay-bg: rgba(0, 0, 0, 0.5);

    /* .modal-content */
    --modal-content-bg: white;
    --modal-content-padding: 2rem;
    --modal-content-radius: 0.5rem;
    --modal-content-max-width: 31.25rem;
    --modal-content-width: 90%;
    --modal-content-shadow: 0 0.625rem 1.5625rem rgba(0, 0, 0, 0.2);

    /* .modal-header */
    --modal-header-margin: 1rem;

    /* .close-btn */
    --close-btn-font-size: 1.5rem;
    --close-btn-padding: 0.5rem;
    --close-btn-radius: 0.25rem;
    --close-btn-hover-bg: #f0f0f0;
    --close-btn-focus-outline: 2px solid #007acc;
    --close-btn-background: none;
    --close-btn-border: none;
}

.modal-overlay {
    position: fixed;
    inset: var(--modal-overlay-inset);
    z-index: var(--modal-overlay-z-index);
    display: grid;
    place-content: center;
    width: var(--modal-overlay-width);
    height: var(--modal-overlay-height);
    background: var(--modal-overlay-bg);
}

.modal-content {
    width: var(--modal-content-width);
    max-width: var(--modal-content-max-width);
    padding: var(--modal-content-padding);
    border-radius: var(--modal-content-radius);
    background: var(--modal-content-bg);
    box-shadow: var(--modal-content-shadow);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--modal-header-margin);
}

.close-btn {
    padding: var(--close-btn-padding);
    border-radius: var(--close-btn-radius);
    background: var(--close-btn-background);
    border: var(--close-btn-border);
    font-size: var(--close-btn-font-size);
    cursor: pointer;


    &:is(:hover, :focus) {
        background: var(--close-btn-hover-bg);
        outline: var(--close-btn-focus-outline);
    }
}
</style>
