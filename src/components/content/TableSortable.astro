---

---

<section class="component-section">
  <h3>Table Triable et Filtrable</h3>
  <div x-data="tableSortable()">
    <label for="table-filter" class="sr-only"
      >Filtrer les données du tableau</label
    >
    <input
      type="text"
      id="table-filter"
      class="table-filter"
      x-model="filter"
      placeholder="Filtrer les données..."
      aria-describedby="filter-help"
    />
    <div id="filter-help" class="sr-only">
      Tapez pour filtrer les lignes du tableau
    </div>

    <div class="table-container">
      <table
        class="sortable-table"
        role="table"
        aria-label="Données des employés"
      >
        <thead>
          <tr role="row">
            <template x-for="column in columns" :key="column.key">
              <th
                role="columnheader"
                :aria-sort="getSortState(column.key)"
                tabindex="0"
                @click="sort(column.key)"
                @keydown.enter="sort(column.key)"
                @keydown.space.prevent="sort(column.key)"
              >
                <span x-text="column.label"></span>
                <span
                  class="sort-indicator"
                  :class="{ 'active': sortColumn === column.key }"
                  x-text="getSortIcon(column.key)"
                  aria-hidden="true"
                >
                </span>
              </th>
            </template>
          </tr>
        </thead>
        <tbody>
          <template x-for="row in filteredAndSortedData" :key="row.id">
            <tr role="row">
              <td role="cell" x-text="row.nom"></td>
              <td role="cell" x-text="row.poste"></td>
              <td role="cell" x-text="row.departement"></td>
              <td role="cell" x-text="row.salaire"></td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>

    <div role="status" aria-live="polite" class="sr-only">
      <span x-text="`${filteredAndSortedData.length} résultats affichés`"
      ></span>
    </div>
  </div>
</section>

<script>
  import { defineComponent } from "@utils/utils.js";

  /**
   * @component TableSortable
   * @description A sortable and filterable table component implemented using Alpine.js in Astro.
   *
   * @property {string} sortColumn - Current column being sorted
   * @property {string} sortDirection - Sort direction ('asc' or 'desc')
   * @property {string} filter - Current filter text
   * @property {Array} columns - Array of column definitions with key and label
   * @property {Array} data - Array of objects containing table data
   *
   * @method filteredAndSortedData - Computed property that returns filtered and sorted data
   * @method sort(column) - Handles column sorting and announces sort state for accessibility
   * @method getSortState(column) - Returns current sort state for a column ('none', 'ascending', 'descending')
   * @method getSortIcon(column) - Returns appropriate sort icon for a column ('↕', '↑', '↓')
   * @method announce(message) - Creates temporary announcement for screen readers
   *
   * @features
   * - Sortable columns with ascending/descending toggle
   * - Global text filtering across all fields
   * - Special handling for salary sorting (removes currency symbol and spaces)
   * - Accessibility support with ARIA announcements
   * - Screen reader compatibility
   * - Responsive table design
   *
   * @accessibility
   * - Uses aria-sort attributes for sorting status
   * - Implements live regions for sort announcements
   * - Provides screen reader feedback for sorting actions
   */
  defineComponent("tableSortable", () => {
    return {
      sortColumn: "",
      sortDirection: "asc",
      filter: "",
      columns: [
        { key: "nom", label: "Nom" },
        { key: "poste", label: "Poste" },
        { key: "departement", label: "Département" },
        { key: "salaire", label: "Salaire" },
      ],
      data: [
        {
          id: 1,
          nom: "Marie Dupont",
          poste: "Développeuse",
          departement: "IT",
          salaire: "45000€",
        },
        {
          id: 2,
          nom: "Jean Martin",
          poste: "Designer",
          departement: "UX",
          salaire: "42000€",
        },
        {
          id: 3,
          nom: "Sophie Leroy",
          poste: "Chef de projet",
          departement: "Management",
          salaire: "55000€",
        },
        {
          id: 4,
          nom: "Pierre Dubois",
          poste: "Analyste",
          departement: "IT",
          salaire: "40000€",
        },
        {
          id: 5,
          nom: "Julie Moreau",
          poste: "Consultante",
          departement: "Business",
          salaire: "48000€",
        },
      ],

      get filteredAndSortedData() {
        let filtered = this.data;

        if (this.filter) {
          filtered = filtered.filter((row) =>
            Object.values(row).some((value) =>
              value.toString().toLowerCase().includes(this.filter.toLowerCase())
            )
          );
        }

        if (this.sortColumn) {
          filtered.sort((a, b) => {
            let aVal = a[this.sortColumn];
            let bVal = b[this.sortColumn];

            if (this.sortColumn === "salaire") {
              aVal = parseInt(aVal.replace(/[€\s]/g, ""));
              bVal = parseInt(bVal.replace(/[€\s]/g, ""));
            }

            if (aVal < bVal) return this.sortDirection === "asc" ? -1 : 1;
            if (aVal > bVal) return this.sortDirection === "asc" ? 1 : -1;
            return 0;
          });
        }

        return filtered;
      },

      sort(column) {
        if (this.sortColumn === column) {
          this.sortDirection = this.sortDirection === "asc" ? "desc" : "asc";
        } else {
          this.sortColumn = column;
          this.sortDirection = "asc";
        }

        const columnLabel = this.columns.find(
          (col) => col.key === column
        ).label;
        const direction =
          this.sortDirection === "asc" ? "croissant" : "décroissant";
        this.announce(`Tableau trié par ${columnLabel} en ordre ${direction}`);
      },

      getSortState(column) {
        if (this.sortColumn !== column) return "none";
        return this.sortDirection === "asc" ? "ascending" : "descending";
      },

      getSortIcon(column) {
        if (this.sortColumn !== column) return "↕";
        return this.sortDirection === "asc" ? "↑" : "↓";
      },

      announce(message) {
        const announcer = document.createElement("div");
        announcer.setAttribute("role", "status");
        announcer.setAttribute("aria-live", "polite");
        announcer.className = "sr-only";
        announcer.textContent = message;
        document.body.appendChild(announcer);
        setTimeout(() => document.body.removeChild(announcer), 1000);
      },
    };
  });
</script>

<style>
  :root {
    /* .table-container */
    --table-container-overflow-x: auto;
    --table-container-radius: 0.5rem;
    --table-container-shadow: 0 0.125rem 0.625rem rgba(0, 0, 0, 0.1);

    /* .sortable-table */
    --sortable-table-width: 100%;
    --sortable-table-border-collapse: collapse;
    --sortable-table-bg: #ffffff;
    --sortable-table-border-color: #eeeeee;
    --sortable-table-cell-padding-y: 0.75rem;
    --sortable-table-cell-padding-x: 0.9375rem;

    --sortable-table-th-bg: #f8f9fa;
    --sortable-table-th-bg-hover: #e9ecef;
    --sortable-table-th-font-weight: 600;
    --sortable-table-th-outline-color: #4a90e2;
    --sortable-table-th-outline-width: 0.125rem;
    --sortable-table-th-outline-offset: -0.125rem;

    /* .sort-indicator */
    --sort-indicator-top: 50%;
    --sort-indicator-transform: translateY(-50%);
    --sort-indicator-offset-right: 0.5rem;
    --sort-indicator-opacity: 0.5;
    --sort-indicator-opacity-active: 1;
    --sort-indicator-color-active: #4a90e2;

    /* .table-filter */
    --table-filter-width: 100%;
    --table-filter-max-width: 18.75rem;
    --table-filter-margin-bottom: 0.9375rem;
    --table-filter-padding: 0.625rem;
    --table-filter-border: 0.0625rem solid #ddd;
    --table-filter-border-radius: 0.25rem;
    --table-filter-font-size: 1rem;
    --table-filter-border-focus-color: #4a90e2;
    --table-filter-outline: 0.125rem solid #4a90e2;
  }

  .table-container {
    overflow-x: var(--table-container-overflow-x);
    border-radius: var(--table-container-radius);
    box-shadow: var(--table-container-shadow);
  }

  .sortable-table {
    width: var(--sortable-table-width);
    border-collapse: var(--sortable-table-border-collapse);
    background: var(--sortable-table-bg);

    th,
    td {
      padding: var(--sortable-table-cell-padding-y)
        var(--sortable-table-cell-padding-x);
      border-bottom: 0.0625rem solid var(--sortable-table-border-color);
      text-align: left;
    }

    th {
      position: relative;
      background: var(--sortable-table-th-bg);
      font-weight: var(--sortable-table-th-font-weight);
      cursor: pointer;
      user-select: none;

      &:hover {
        background: var(--sortable-table-th-bg-hover);
      }

      &:focus {
        outline: var(--sortable-table-th-outline-width) solid
          var(--sortable-table-th-outline-color);
        outline-offset: var(--sortable-table-th-outline-offset);
      }
    }
  }

  .sort-indicator {
    position: absolute;
    top: var(--sort-indicator-top);
    right: var(--sort-indicator-offset-right);
    transform: var(--sort-indicator-transform);
    opacity: var(--sort-indicator-opacity);

    &.active {
      opacity: var(--sort-indicator-opacity-active);
      color: var(--sort-indicator-color-active);
    }
  }

  .table-filter {
    width: var(--table-filter-width);
    max-width: var(--table-filter-max-width);
    margin-bottom: var(--table-filter-margin-bottom);
    padding: var(--table-filter-padding);
    border: var(--table-filter-border);
    border-radius: var(--table-filter-border-radius);
    font-size: var(--table-filter-font-size);

    &:focus {
      border-color: var(--table-filter-border-focus-color);
      outline: var(--table-filter-outline);
    }
  }
</style>
