---

---

<section class="component-section">
  <h3>Accordion</h3>
  <div x-data="accordion()" class="accordion">
    <div class="accordion-item">
      <button
        class="accordion-header"
        @click="toggle(0)"
        :aria-expanded="isOpen(0)"
        aria-controls="panel-0"
        id="heading-0"
      >
        <span>Section 1</span>
        <span class="accordion-icon" :class="{ 'rotated': isOpen(0) }">▼</span>
      </button>
      <div
        x-show="isOpen(0)"
        x-collapse
        class="accordion-content"
        role="region"
        aria-labelledby="heading-0"
        id="panel-0"
      >
        <p>Contenu de la première section de l'accordéon.</p>
      </div>
    </div>

    <div class="accordion-item">
      <button
        class="accordion-header"
        @click="toggle(1)"
        :aria-expanded="isOpen(1)"
        aria-controls="panel-1"
        id="heading-1"
      >
        <span>Section 2</span>
        <span class="accordion-icon" :class="{ 'rotated': isOpen(1) }">▼</span>
      </button>
      <div
        x-show="isOpen(1)"
        x-collapse
        class="accordion-content"
        role="region"
        aria-labelledby="heading-1"
        id="panel-1"
      >
        <p>Contenu de la deuxième section de l'accordéon.</p>
      </div>
    </div>

    <div class="accordion-item">
      <button
        class="accordion-header"
        @click="toggle(2)"
        :aria-expanded="isOpen(2)"
        aria-controls="panel-2"
        id="heading-2"
      >
        <span>Section 3</span>
        <span class="accordion-icon" :class="{ 'rotated': isOpen(2) }">▼</span>
      </button>
      <div
        x-show="isOpen(2)"
        x-collapse
        class="accordion-content"
        role="region"
        aria-labelledby="heading-2"
        id="panel-2"
      >
        <p>Contenu de la troisième section de l'accordéon.</p>
      </div>
    </div>
  </div>
</section>

<script>
  import { defineComponent } from "@utils/utils.js";

  /**
   * Accordion component functionality handler
   *
   * This component defines the behavior for an accordion interface:
   * - Manages the state of accordion items through an array of open indices
   * - Provides methods to toggle and check the state of accordion items
   *
   * @function defineComponent
   * @param {string} "accordion" - Component name identifier
   * @returns {Object} Component configuration object with the following:
   *   @property {Array} openItems - Stores indices of currently open accordion items
   *   @property {Function} toggle - Toggles the open/closed state of an accordion item
   *     @param {number} index - The index of the accordion item to toggle
   *   @property {Function} isOpen - Checks if a specific accordion item is open
   *     @param {number} index - The index of the accordion item to check
   *     @returns {boolean} True if item is open, false otherwise
   */
  defineComponent("accordion", () => {
    return {
      openItems: [],

      toggle(index) {
        if (this.isOpen(index)) {
          this.openItems = this.openItems.filter((i) => i !== index);
        } else {
          this.openItems.push(index);
        }
      },

      isOpen(index) {
        return this.openItems.includes(index);
      },
    };
  });
</script>

<style>
  :root {
    /* .accordion */
    --accordion-border-color: #ddd;
    --accordion-border-width: 1px;
    --accordion-border-radius: 0.25rem;

    /* .accordion-header */
    --accordion-header-width: 100%;
    --accordion-header-padding: 1rem;
    --accordion-header-bg: #f8f9fa;
    --accordion-header-text-align: left;
    --accordion-header-hover-bg: #e9ecef;
    --accordion-header-focus-outline: #007acc;
    --accordion-header-focus-width: 0.125rem;

    /* .accordion-content */
    --accordion-content-padding: 1rem;
    --accordion-content-bg: white;

    --accordion-transition-duration: 0.3s;

    /* .accordion-icon */
    --accordion-icon-rotated: rotate(180deg);
  }

  .accordion {
    border: var(--accordion-border-width) solid var(--accordion-border-color);
    border-radius: var(--accordion-border-radius);
  }

  .accordion-item {
    border-bottom: var(--accordion-border-width) solid
      var(--accordion-border-color);

    &:last-child {
      border-bottom: none;
    }
  }

  .accordion-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: var(--accordion-header-width);
    background: var(--accordion-header-bg);
    border: none;
    padding: var(--accordion-header-padding);
    text-align: var(--accordion-header-text-align);
    cursor: pointer;

    &:is(:hover, :focus) {
      background: var(--accordion-header-hover-bg);
      outline: var(--accordion-header-focus-width) solid
        var(--accordion-header-focus-outline);
    }
  }

  .accordion-content {
    padding: var(--accordion-content-padding);
    background: var(--accordion-content-bg);
  }

  .accordion-icon {
    transition: transform var(--accordion-transition-duration);

    &.rotated {
      transform: var(--accordion-icon-rotated);
    }
  }
</style>
